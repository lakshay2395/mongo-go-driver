// Code will be generated by drivergen. DO NOT EDIT.

package driver

import (
	"github.com/lakshay2395/mongo-go-driver/mongo/readconcern"
	"github.com/lakshay2395/mongo-go-driver/mongo/readpref"
	"github.com/lakshay2395/mongo-go-driver/x/bsonx/bsoncore"
	"github.com/lakshay2395/mongo-go-driver/x/mongo/driverlegacy/session"
	"github.com/lakshay2395/mongo-go-driver/x/network/description"
)

// Command constructs and returns a new CommandOperation.
func Command(cmd bsoncore.Document) *CommandOperation {
	return &CommandOperation{cmd: cmd}
}

// Session sets the session for this operation.
func (co *CommandOperation) Session(client *session.Client) *CommandOperation {
	if co == nil {
		co = new(CommandOperation)
	}

	co.client = client
	return co
}

// Clock sets the cluster clock for this operation.
func (co *CommandOperation) Clock(clock *session.ClusterClock) *CommandOperation {
	if co == nil {
		co = new(CommandOperation)
	}

	co.clock = clock
	return co
}

// Command sets the command that will be run.
func (co *CommandOperation) Command(cmd bsoncore.Document) *CommandOperation {
	if co == nil {
		co = new(CommandOperation)
	}

	co.cmd = cmd
	return co
}

// Deployment sets the Deployment to run the command against.
func (co *CommandOperation) Deployment(d Deployment) *CommandOperation {
	if co == nil {
		co = new(CommandOperation)
	}

	co.d = d
	return co
}

// Database sets the database to run the command against.
func (co *CommandOperation) Database(database string) *CommandOperation {
	if co == nil {
		co = new(CommandOperation)
	}

	co.database = database
	return co
}

// ReadConcern sets the read concern to use when running the command.
func (co *CommandOperation) ReadConcern(rc *readconcern.ReadConcern) *CommandOperation {
	if co == nil {
		co = new(CommandOperation)
	}

	co.rc = rc
	return co
}

// ReadPreference sets the read preference for this operation.
func (co *CommandOperation) ReadPreference(readPref *readpref.ReadPref) *CommandOperation {
	if co == nil {
		co = new(CommandOperation)
	}

	co.readPref = readPref
	return co
}

// ServerSelector sets the server selector for this operaiton.
func (co *CommandOperation) ServerSelector(selector description.ServerSelector) *CommandOperation {
	if co == nil {
		co = new(CommandOperation)
	}

	co.selector = selector
	return co
}
